# main.py
import os, json, multiprocessing, logging
from telegram import (
    Update, Bot,
    ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup,
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CONSTRUCTOR_TOKEN = "7952794259:AAHCLUk7Zw-DOqfJSFWrda4rOjWp3B_CqQY"
ADMIN_USERNAME    = "SAKI_n_tosh"
BOTS_FILE         = "bots.json"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
processes   = {}             # token -> multiprocessing.Process
WAIT_FOR    = {}             # chat_id -> state
BCAST_DATA  = {}             # chat_id -> {"text": str, "button": (label,url)|None}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def load_tokens():
    if not os.path.exists(BOTS_FILE):
        json.dump([], open(BOTS_FILE, "w"))
    return json.load(open(BOTS_FILE))

def save_tokens(tokens):
    json.dump(tokens, open(BOTS_FILE, "w"), indent=2)

def spawn_bot(token):
    from anon_chat_bot import main as anon_main
    p = multiprocessing.Process(target=anon_main, args=(token,))
    p.daemon = True
    p.start()
    processes[token] = p

def only_admin(func):
    async def wrapper(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.username != ADMIN_USERNAME:
            return await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return await func(update, ctx)
    return wrapper

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = ReplyKeyboardMarkup(
        [
            ["/addbot", "/bots"],
            ["/analytics", "/broadcast"],
            ["/setdesc", "/setad"],
        ],
        resize_keyboard=True
    )
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —á–∞—Ç–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
        reply_markup=kb
    )

@only_admin
async def cmd_addbot(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    WAIT_FOR[update.effective_chat.id] = "token"
    await update.message.reply_text("üì• –û—Ç–ø—Ä–∞–≤—å —Ç–æ–∫–µ–Ω –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞:")

@only_admin
async def cmd_bots(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lines = []
    for t in load_tokens():
        alive = "üü¢" if processes.get(t) and processes[t].is_alive() else "üî¥"
        lines.append(f"{t[:10]}‚Ä¶ ‚Äî {alive}")
    await update.message.reply_text("ü§ñ –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:\n" + "\n".join(lines))

@only_admin
async def cmd_analytics(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    total, lines = 0, []
    for t in load_tokens():
        path = os.path.join("data", "subs.json")
        try:
            cnt = len(json.load(open(path)))
        except: cnt = 0
        total += cnt
        lines.append(f"{t[:10]}‚Ä¶ ‚Äî {cnt}")
    await update.message.reply_text(
        "üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏:\n" + "\n".join(lines) + f"\n\n–í—Å–µ–≥–æ: {total}"
    )

@only_admin
async def cmd_broadcast(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    WAIT_FOR[update.effective_chat.id] = "bcast_text"
    await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")

@only_admin
async def cmd_setdesc(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    WAIT_FOR[update.effective_chat.id] = "desc"
    await update.message.reply_text("üìÑ –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π description:")

@only_admin
async def cmd_setad(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    WAIT_FOR[update.effective_chat.id] = "ad"
    await update.message.reply_text("üì¢ –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π short_description:")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@only_admin
async def text_router(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid   = update.effective_chat.id
    state = WAIT_FOR.get(cid)
    text  = update.message.text.strip()

    # -------- ADD BOT --------
    if state == "token":
        token = text
        try:
            await Bot(token).get_me()
        except:
            return await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        tokens = load_tokens()
        if token in tokens:
            return await update.message.reply_text("‚ùó –≠—Ç–æ—Ç –±–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        tokens.append(token); save_tokens(tokens); spawn_bot(token)
        await update.message.reply_text("‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω.")
        WAIT_FOR.pop(cid, None)

    # -------- BCAST: —Ç–µ–∫—Å—Ç --------
    elif state == "bcast_text":
        BCAST_DATA[cid] = {"text": text, "button": None}
        WAIT_FOR[cid]   = "bcast_button"
        await update.message.reply_text(
            "üîò –û—Ç–ø—Ä–∞–≤—å `label|URL` –∏–ª–∏ `label URL` –¥–ª—è –∫–Ω–æ–ø–∫–∏.\n"
            "–ù–∞–ø–∏—à–∏ `nobutton`, —á—Ç–æ–±—ã –±–µ–∑ –∫–Ω–æ–ø–∫–∏.",
            parse_mode="Markdown"
        )

    # -------- BCAST: –∫–Ω–æ–ø–∫–∞ / nobutton --------
    elif state == "bcast_button":
        data = BCAST_DATA[cid]
        if text.lower().lstrip("/") == "nobutton":
            button = None
        else:
            if "|" in text: parts = text.split("|", 1)
            elif " " in text: parts = text.split(" ", 1)
            else:
                return await update.message.reply_text(
                    "‚ùó –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ω. –ù—É–∂–Ω–æ `label|URL`, `label URL` –∏–ª–∏ `nobutton`."
                )
            button = (parts[0].strip(), parts[1].strip())
        data["button"] = button

        # –†–∞—Å—Å—ã–ª–∫–∞
        sent = 0
        for tok in load_tokens():
            try:
                subs = json.load(open(os.path.join("data", "subs.json")))
            except: subs = {}
            bot = Bot(tok)
            for uid in subs.keys():
                try:
                    if button:
                        kb = InlineKeyboardMarkup(
                            [[InlineKeyboardButton(button[0], url=button[1])]]
                        )
                        await bot.send_message(int(uid), data["text"], reply_markup=kb)
                    else:
                        await bot.send_message(int(uid), data["text"])
                    sent += 1
                except: pass
        await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")
        WAIT_FOR.pop(cid, None)
        BCAST_DATA.pop(cid, None)

    # -------- setdesc --------
    elif state == "desc":
        ok = 0
        for tok in load_tokens():
            try:
                await Bot(tok).set_my_description(description=text); ok += 1
            except: pass
        await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–π: {ok}")
        WAIT_FOR.pop(cid, None)

    # -------- setad --------
    elif state == "ad":
        ok = 0
        for tok in load_tokens():
            try:
                await Bot(tok).set_my_short_description(short_description=text); ok += 1
            except: pass
        await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ short_description: {ok}")
        WAIT_FOR.pop(cid, None)

    # -------- –ù–∏—á–µ–≥–æ –Ω–µ –∂–¥—ë–º --------
    else:
        await update.message.reply_text("‚ùó –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é /start.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    logging.basicConfig(level=logging.INFO)

    # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
    for tok in load_tokens():
        spawn_bot(tok)

    app = Application.builder().token(CONSTRUCTOR_TOKEN).build()

    app.add_handler(CommandHandler("start",     cmd_start))
    app.add_handler(CommandHandler("addbot",    cmd_addbot))
    app.add_handler(CommandHandler("bots",      cmd_bots))
    app.add_handler(CommandHandler("analytics", cmd_analytics))
    app.add_handler(CommandHandler("broadcast", cmd_broadcast))
    app.add_handler(CommandHandler("setdesc",   cmd_setdesc))
    app.add_handler(CommandHandler("setad",     cmd_setad))

    # –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç (–≤–∫–ª—é—á–∞—è /nobutton)
    app.add_handler(MessageHandler(filters.TEXT, text_router))

    app.run_polling()

if __name__ == "__main__":
    main()
