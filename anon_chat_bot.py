# anon_chat_bot.py

import os
import json
import time
import logging
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ‚Äî –ü–∞–ø–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö ‚Äî
DATA_DIR = os.path.join(os.path.dirname(__file__), "data")
os.makedirs(DATA_DIR, exist_ok=True)

WAIT_F   = os.path.join(DATA_DIR, "wait.json")
CHATS_F  = os.path.join(DATA_DIR, "chats.json")
COMPL_F  = os.path.join(DATA_DIR, "complaints.json")
BANS_F   = os.path.join(DATA_DIR, "bans.json")
SUBS_F   = os.path.join(DATA_DIR, "subs.json")

ADMIN_CONTACT = "https://t.me/SAKI_n_tosh"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
for path in (WAIT_F, CHATS_F, COMPL_F, BANS_F, SUBS_F):
    if not os.path.exists(path):
        with open(path, "w") as f:
            json.dump({}, f)

def load(path):
    with open(path, "r") as f:
        return json.load(f)

def save(path, data):
    with open(path, "w") as f:
        json.dump(data, f)

def is_banned(user_id):
    bans = load(BANS_F)
    ts = bans.get(str(user_id))
    if ts and time.time() < ts:
        return datetime.fromtimestamp(ts).strftime("%Y-%m-%d %H:%M")
    return False

def add_sub(user_id):
    subs = load(SUBS_F)
    subs[str(user_id)] = True
    save(SUBS_F, subs)

# ‚Äî /start ‚Äî
async def start_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id

    if is_banned(uid):
        return await update.message.reply_text(f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {is_banned(uid)}")

    add_sub(uid)
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å —á–∞—Ç", callback_data="START_CHAT"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∞", url=ADMIN_CONTACT),
    ]])
    text = (
        "üë§ *–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç*\n\n"
        "‚Äì –ñ–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —á–∞—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n"
        "‚Äì /stop –∏–ª–∏ ¬´–í—ã–π—Ç–∏¬ª ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç.\n"
        "‚Äì /ban ‚Äî –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n\n"
        "–ü—Ä–∏ 10 –∂–∞–ª–æ–±–∞—Ö –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ–Ω –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 –¥–Ω—è."
    )
    await update.message.reply_markdown(text, reply_markup=kb)

# ‚Äî –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ‚Äî
async def start_chat_cb(update, ctx):
    query = update.callback_query
    uid   = query.from_user.id
    await query.answer()

    if is_banned(uid):
        return await query.edit_message_text(f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {is_banned(uid)}")

    wait  = load(WAIT_F)
    chats = load(CHATS_F)

    # –ï—Å–ª–∏ —É–∂–µ –≤ —á–∞—Ç–µ
    if str(uid) in chats:
        return await query.edit_message_text("‚ùó –í—ã —É–∂–µ –≤ —á–∞—Ç–µ. /stop ‚Äî –≤—ã–π—Ç–∏.")

    # –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∂–¥—ë—Ç
    if wait:
        other_id, _ = wait.popitem()
        # –ù–µ —Å–æ–µ–¥–∏–Ω—è–µ–º —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
        if other_id == uid:
            # –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏, –∂–¥—ë–º –¥–∞–ª—å—à–µ
            wait[str(uid)] = time.time()
            save(WAIT_F, wait)
            return await query.edit_message_text("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞...")
        # –°–æ–∑–¥–∞—ë–º —á–∞—Ç
        chats[str(uid)]      = other_id
        chats[str(other_id)] = uid
        save(WAIT_F, wait)
        save(CHATS_F, chats)
        await ctx.bot.send_message(other_id, "‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ü–∏—à–∏—Ç–µ. /stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å, /ban - –∂–∞–ª–æ–±–∞.")
        await ctx.bot.send_message(uid,       "‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ü–∏—à–∏—Ç–µ. /stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å, /ban - –∂–∞–ª–æ–±–∞.")
    else:
        # –°—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
        wait[str(uid)] = time.time()
        save(WAIT_F, wait)
        await query.edit_message_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

# ‚Äî –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ /stop) ‚Äî
async def stop_chat(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid   = update.effective_user.id
    chats = load(CHATS_F)
    partner = chats.pop(str(uid), None)
    if partner:
        chats.pop(str(partner), None)
        save(CHATS_F, chats)
        await ctx.bot.send_message(partner, "üî¥ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.")
        return await update.message.reply_text("üî¥ –í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞.")
    return await update.message.reply_text("‚ùó –í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ —á–∞—Ç–µ.")

# ‚Äî –ñ–∞–ª–æ–±–∞ /ban (1 —Ä–∞–∑ –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞) ‚Äî
async def ban_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid   = update.effective_user.id
    chats = load(CHATS_F)
    partner = chats.get(str(uid))
    if not partner:
        return await update.message.reply_text("‚ùó –í—ã –Ω–µ –≤ —á–∞—Ç–µ, –∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–µ –Ω–∞ –∫–æ–≥–æ.")

    comp = load(COMPL_F)
    key = f"{uid}:{partner}"
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∂–∞–ª–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ
    if comp.get(key):
        return await update.message.reply_text("‚ùó –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∂–∞–ª–æ–±—É —ç—Ç–æ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.")

    # –¥–µ–ª–∞–µ–º –∂–∞–ª–æ–±—É
    comp[key] = True
    cnt, stamps = load(COMPL_F).get(str(partner), (0, []))
    cnt += 1; stamps.append(time.time())
    all_comp = load(COMPL_F)
    all_comp[str(partner)] = (cnt, stamps)
    all_comp[key] = True  # –º–∞—Ä–∫–µ—Ä, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∂–∞–ª–æ–≤–∞–ª–∏—Å—å
    save(COMPL_F, all_comp)

    msg = f"üì£ –ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å {cnt} –∂–∞–ª–æ–±."
    await update.message.reply_text(msg)

    # –±–∞–Ω–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø—Ä–∏ 10 –∂–∞–ª–æ–±–∞—Ö
    if cnt >= 10:
        bans = load(BANS_F)
        bans[str(partner)] = time.time() + 3 * 24 * 3600
        save(BANS_F, bans)

        # —Ä–∞–∑—Ä—ã–≤–∞–µ–º —á–∞—Ç
        chats.pop(str(partner), None)
        chats.pop(str(uid), None)
        save(CHATS_F, chats)

        await ctx.bot.send_message(partner, "üö´ –í–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ 3 –¥–Ω—è –∑–∞ –∂–∞–ª–æ–±—ã.")

# ‚Äî –†–µ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî
async def relay_msg(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id

    if is_banned(uid):
        return await update.message.reply_text(f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {is_banned(uid)}")

    chats = load(CHATS_F)
    partner = chats.get(str(uid))
    if not partner:
        return await update.message.reply_text("‚ùó –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —á–∞—Ç¬ª –∏–ª–∏ /start.")
    if update.message.text:
        await ctx.bot.send_message(partner, update.message.text)

def main(token: str):
    logging.basicConfig(level=logging.INFO)
    app = Application.builder().token(token).build()

    # Handlers
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CallbackQueryHandler(start_chat_cb, pattern="^START_CHAT$"))
    app.add_handler(CallbackQueryHandler(stop_chat,     pattern="^STOP_CHAT$"))
    app.add_handler(CommandHandler("stop",  stop_chat))
    app.add_handler(CommandHandler("ban",   ban_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, relay_msg))

    app.run_polling()

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python anon_chat_bot.py <TOKEN>")
        sys.exit(1)
    main(sys.argv[1])
